---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v1;(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))
ref(int) v1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))
ref(int) v1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))
ref(int) v2

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))
ref(int) v2

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))
ref(int) v3

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))
ref(int) v3

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))
int cnt

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))
int cnt

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))
new(v1, 2)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))
new(v1, 2)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))
new(v2, 3)

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))
new(v2, 3)

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))
new(v3, 4)

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))
new(v3, 4)

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))
newBarrier(cnt, rH(v2))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))
newBarrier(cnt, rH(v2))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))
fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))
fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))
fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))
fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))
wH(v1, rH(v1)MULTIPLY10)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))
wH(v1, rH(v1)MULTIPLY10)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 3
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 3
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 300 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v1;(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))
ref(int) v1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))
ref(int) v1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v2;(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))
ref(int) v2

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))
ref(int) v2

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(ref(int) v3;(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))
ref(int) v3

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))
ref(int) v3

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(int cnt;(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))
int cnt

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))
int cnt

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v1, 2);(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))
new(v1, 2)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))
new(v1, 2)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v2, 3);(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))))

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))
new(v2, 3)

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))
new(v2, 3)

Heap {
1 -> 2
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(new(v3, 4);(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))))

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))
new(v3, 4)

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))
new(v3, 4)

Heap {
1 -> 2
2 -> 3
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(newBarrier(cnt, rH(v2));(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))
newBarrier(cnt, rH(v2))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))
newBarrier(cnt, rH(v2))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))));(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))
fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))
fork((await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))));(await(cnt);print(rH(v3))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);(wH(v1, rH(v1)MULTIPLY10);print(rH(v1))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))
fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))
fork((await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);print(rH(v3)))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(await(cnt);(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))
await(cnt)

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))
await(cnt)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))
await(cnt)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v3))

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v1, rH(v1)MULTIPLY10);print(rH(v1)))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);(wH(v2, rH(v2)MULTIPLY10);print(rH(v2))))

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))
wH(v1, rH(v1)MULTIPLY10)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))
wH(v1, rH(v1)MULTIPLY10)

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 2
2 -> 3
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v1))

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
(wH(v2, rH(v2)MULTIPLY10);print(rH(v2)))

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 2 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))
wH(v2, rH(v2)MULTIPLY10)

Heap {
1 -> 20
2 -> 30
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:
print(rH(v2))

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 3 SymTable {
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)
}

Exec stack:

Heap {
1 -> 20
2 -> 300
3 -> 4
}

Output List: [ 4 20 300 ]

BarrierTable {
1 -> 3=[2, 1, 3]
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int v;(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 2 SymTable {
x -> 0
y -> 0
v -> -1
}

Exec stack:

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 3 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Id 4 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 30 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
}

Exec stack:
(int v;(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 14 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 14 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 14 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 14 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 14 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 14 SymTable {
x -> 0
y -> 0
v -> -1
}

Exec stack:

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 15 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 15 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 15 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 15 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 15 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 15 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 16 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 16 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 16 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 16 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 16 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Id 16 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 12 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 30 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int v;(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))
int v

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int x;(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))
int x

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(int y;(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))
int y

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(v = 0;(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))
v = 0

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3);(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10))))))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
repeat { (fork((print(v);v = vMINUS1));v = vPLUS1) } until (v EQUAL 3)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
((fork((print(v);v = vMINUS1));v = vPLUS1);while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) })

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 0
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 2 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 2 SymTable {
x -> 0
y -> 0
v -> -1
}

Exec stack:

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 1
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
(fork((print(v);v = vMINUS1));v = vPLUS1)

Id 3 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Id 3 SymTable {
x -> 0
y -> 0
v -> 0
}

Exec stack:

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1
fork((print(v);v = vMINUS1))

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 2
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }
v = vPLUS1

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
(print(v);v = vMINUS1)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))
while (!(v EQUAL 3)) { (fork((print(v);v = vMINUS1));v = vPLUS1) }

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1
print(v)

Heap {
}

Output List: [ 0 1 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(x = 1;(nop;(y = 3;(nop;print(vMULTIPLY10)))))

Id 4 SymTable {
x -> 0
y -> 0
v -> 2
}

Exec stack:
v = vMINUS1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Id 4 SymTable {
x -> 0
y -> 0
v -> 1
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 0
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))
x = 1

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;(y = 3;(nop;print(vMULTIPLY10))))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(y = 3;(nop;print(vMULTIPLY10)))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 0
}

Exec stack:
(nop;print(vMULTIPLY10))
y = 3

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
(nop;print(vMULTIPLY10))

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)
nop

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:
print(vMULTIPLY10)

Heap {
}

Output List: [ 0 1 2 ]

BarrierTable {
}


---- Program States ----

Id 1 SymTable {
v -> 3
x -> 1
y -> 3
}

Exec stack:

Heap {
}

Output List: [ 0 1 2 30 ]

BarrierTable {
}


